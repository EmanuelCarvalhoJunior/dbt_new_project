{"creation_time": "2024-06-29T02:56:00+00:00", "days_back": 7, "models": {"model.my_project_dbt.feminino": {"name": "feminino", "unique_id": "model.my_project_dbt.feminino", "owners": [], "tags": [], "package_name": "my_project_dbt", "description": "", "full_path": "models/bronze/feminino.sql", "meta": {}, "materialization": "table", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "patch_path": "my_project_dbt://models/bronze/models.yml", "model_name": "feminino", "normalized_full_path": "my_project_dbt/models/bronze/feminino.sql", "fqn": "dbt_db.dbt_schema.feminino", "artifact_type": "model"}, "model.my_project_dbt.ingestion1": {"name": "ingestion1", "unique_id": "model.my_project_dbt.ingestion1", "owners": [], "tags": [], "package_name": "my_project_dbt", "description": "", "full_path": "models/bronze/ingestion1.sql", "meta": {}, "materialization": "table", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "ingestion1", "patch_path": null, "model_name": "ingestion1", "normalized_full_path": "my_project_dbt/models/bronze/ingestion1.sql", "fqn": "dbt_db.dbt_schema.ingestion1", "artifact_type": "model"}}, "groups": {"dbt": {"my_project_dbt": {"models": {"bronze": {"__files__": [{"node_id": "model.my_project_dbt.feminino", "resource_type": "model"}, {"node_id": "model.my_project_dbt.ingestion1", "resource_type": "model"}]}}}}, "tags": {"No tags": [{"node_id": "model.my_project_dbt.feminino", "resource_type": "model"}, {"node_id": "model.my_project_dbt.ingestion1", "resource_type": "model"}]}, "owners": {"No owners": [{"node_id": "model.my_project_dbt.feminino", "resource_type": "model"}, {"node_id": "model.my_project_dbt.ingestion1", "resource_type": "model"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.my_project_dbt.feminino": [{"metadata": {"test_unique_id": "test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a", "elementary_unique_id": "test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": null, "test_name": "schema_changes_from_baseline", "test_display_name": "Schema Changes From Baseline", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:31-03:00", "latest_run_time_utc": "2024-06-29T02:54:31+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "schema_change", "test_sub_type": "generic", "test_query": "with cur as (\n        \n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n        )\n\n        select\n            columns_snapshot.full_table_name,\n            lower(columns_snapshot.column_name) as column_name,\n            columns_snapshot.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n        from (\n\n    \n\n    with table_info as (\n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            cast('dbt_db' as varchar) as database_name,\n            cast('dbt_schema' as varchar) as schema_name,\n            cast('feminino' as varchar) as table_name,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n    ),\n\n    columns_info as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at\n        from table_info\n        cross join\n            (\n                \n                    select\n                        cast('ID' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('NAME' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('IDADE' as varchar) as column_name,\n                        cast('NUMBER' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('SEXO' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                \n            ) rt\n    ),\n\n    columns_snapshot as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at,\n            case when\n                    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) not in (\n        select full_column_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                    and full_table_name in (\n        select distinct full_table_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                then true\n                else false\n            end as is_new\n        from columns_info\n    ),\n\n    columns_snapshot_with_id as (\n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(data_type as varchar), '') as TEXT))\n as column_state_id,\n            upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n    )\n\n    select\n        cast(column_state_id as varchar) as column_state_id,\n        cast(full_column_name as varchar) as full_column_name,\n        cast(full_table_name as varchar) as full_table_name,\n        cast(column_name as varchar) as column_name,\n        cast(data_type as varchar) as data_type,\n        cast(is_new as boolean) as is_new,\n        cast(detected_at as timestamp) as detected_at\n    from columns_snapshot_with_id) columns_snapshot\n        left join baseline on (\n            lower(columns_snapshot.column_name) = lower(baseline.column_name)\n        )\n        where lower(columns_snapshot.full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    \n    ),\n\n    pre as (\n        \n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            column_name,\n            data_type,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at\n        from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n    \n    ),\n\n    type_changes as (\n\n        \n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    \n\n    columns_removed as (\n\n        \n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            \n    cast(null as varchar)\n as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        \n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        \n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        \n    ),\n\n    column_changes_test_results as (\n\n        \n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(change as varchar), '') || '-' || coalesce(cast(detected_at as varchar), '') as TEXT))\n as data_issue_id,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at,\n            \n    trim(split(full_table_name,'.')[0],'\"') as database_name\n\n,\n            \n    trim(split(full_table_name,'.')[1],'\"') as schema_name\n\n,\n            \n    trim(split(full_table_name,'.')[2],'\"') as table_name\n\n,\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        group by 1,2,3,4,5,6,7,8,9\n\n    )\n\n        \n    select \n  \n\n  md5(cast(coalesce(cast(data_issue_id as varchar), '') || '-' || coalesce(cast(cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as varchar), '') as TEXT))\n as id,\n        cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_execution_id,\n        cast('test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_unique_id,\n        *\n    from column_changes_test_results", "test_params": {"model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "Compares the table's schema against a baseline contract of columns defined in the table's configuration.", "result": {"result_description": null, "result_query": "with cur as (\n        \n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n        )\n\n        select\n            columns_snapshot.full_table_name,\n            lower(columns_snapshot.column_name) as column_name,\n            columns_snapshot.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n        from (\n\n    \n\n    with table_info as (\n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            cast('dbt_db' as varchar) as database_name,\n            cast('dbt_schema' as varchar) as schema_name,\n            cast('feminino' as varchar) as table_name,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n    ),\n\n    columns_info as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at\n        from table_info\n        cross join\n            (\n                \n                    select\n                        cast('ID' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('NAME' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('IDADE' as varchar) as column_name,\n                        cast('NUMBER' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('SEXO' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                \n            ) rt\n    ),\n\n    columns_snapshot as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at,\n            case when\n                    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) not in (\n        select full_column_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                    and full_table_name in (\n        select distinct full_table_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                then true\n                else false\n            end as is_new\n        from columns_info\n    ),\n\n    columns_snapshot_with_id as (\n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(data_type as varchar), '') as TEXT))\n as column_state_id,\n            upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n    )\n\n    select\n        cast(column_state_id as varchar) as column_state_id,\n        cast(full_column_name as varchar) as full_column_name,\n        cast(full_table_name as varchar) as full_table_name,\n        cast(column_name as varchar) as column_name,\n        cast(data_type as varchar) as data_type,\n        cast(is_new as boolean) as is_new,\n        cast(detected_at as timestamp) as detected_at\n    from columns_snapshot_with_id) columns_snapshot\n        left join baseline on (\n            lower(columns_snapshot.column_name) = lower(baseline.column_name)\n        )\n        where lower(columns_snapshot.full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    \n    ),\n\n    pre as (\n        \n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            column_name,\n            data_type,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at\n        from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n    \n    ),\n\n    type_changes as (\n\n        \n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    \n\n    columns_removed as (\n\n        \n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            \n    cast(null as varchar)\n as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        \n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        \n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        \n    ),\n\n    column_changes_test_results as (\n\n        \n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(change as varchar), '') || '-' || coalesce(cast(detected_at as varchar), '') as TEXT))\n as data_issue_id,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at,\n            \n    trim(split(full_table_name,'.')[0],'\"') as database_name\n\n,\n            \n    trim(split(full_table_name,'.')[1],'\"') as schema_name\n\n,\n            \n    trim(split(full_table_name,'.')[2],'\"') as table_name\n\n,\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        group by 1,2,3,4,5,6,7,8,9\n\n    )\n\n        \n    select \n  \n\n  md5(cast(coalesce(cast(data_issue_id as varchar), '') || '-' || coalesce(cast(cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as varchar), '') as TEXT))\n as id,\n        cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_execution_id,\n        cast('test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_unique_id,\n        *\n    from column_changes_test_results"}, "configuration": {"test_name": "schema_changes_from_baseline", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary-tests"], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "generic", "metrics": null, "result_description": null}}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_id.c53a5ada30", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_id.c53a5ada30.id.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:26-03:00", "latest_run_time_utc": "2024-06-29T02:54:26+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom dbt_db.dbt_schema.feminino\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom dbt_db.dbt_schema.feminino\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_idade.76acecd178", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_idade.76acecd178.idade.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "idade", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select idade\nfrom dbt_db.dbt_schema.feminino\nwhere idade is null", "test_params": {"column_name": "idade", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select idade\nfrom dbt_db.dbt_schema.feminino\nwhere idade is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "idade", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_name.3c20f4a1b1", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_name.3c20f4a1b1.name.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "name", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select name\nfrom dbt_db.dbt_schema.feminino\nwhere name is null", "test_params": {"column_name": "name", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select name\nfrom dbt_db.dbt_schema.feminino\nwhere name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "name", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_sexo.c6c5da5488", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_sexo.c6c5da5488.sexo.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "sexo", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select sexo\nfrom dbt_db.dbt_schema.feminino\nwhere sexo is null", "test_params": {"column_name": "sexo", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select sexo\nfrom dbt_db.dbt_schema.feminino\nwhere sexo is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "sexo", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.my_project_dbt.unique_feminino_id.0372147441", "elementary_unique_id": "test.my_project_dbt.unique_feminino_id.0372147441.id.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:27-03:00", "latest_run_time_utc": "2024-06-29T02:54:27+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom dbt_db.dbt_schema.feminino\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom dbt_db.dbt_schema.feminino\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.my_project_dbt.feminino": {"errors": 0, "warnings": 0, "passed": 6, "failures": 0}}, "test_runs": {"model.my_project_dbt.feminino": [{"metadata": {"test_unique_id": "test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a", "elementary_unique_id": "test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": null, "test_name": "schema_changes_from_baseline", "test_display_name": "Schema Changes From Baseline", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:31-03:00", "latest_run_time_utc": "2024-06-29T02:54:31+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "schema_change", "test_sub_type": "generic", "test_query": "with cur as (\n        \n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n        )\n\n        select\n            columns_snapshot.full_table_name,\n            lower(columns_snapshot.column_name) as column_name,\n            columns_snapshot.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n        from (\n\n    \n\n    with table_info as (\n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            cast('dbt_db' as varchar) as database_name,\n            cast('dbt_schema' as varchar) as schema_name,\n            cast('feminino' as varchar) as table_name,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n    ),\n\n    columns_info as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at\n        from table_info\n        cross join\n            (\n                \n                    select\n                        cast('ID' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('NAME' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('IDADE' as varchar) as column_name,\n                        cast('NUMBER' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('SEXO' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                \n            ) rt\n    ),\n\n    columns_snapshot as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at,\n            case when\n                    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) not in (\n        select full_column_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                    and full_table_name in (\n        select distinct full_table_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                then true\n                else false\n            end as is_new\n        from columns_info\n    ),\n\n    columns_snapshot_with_id as (\n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(data_type as varchar), '') as TEXT))\n as column_state_id,\n            upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n    )\n\n    select\n        cast(column_state_id as varchar) as column_state_id,\n        cast(full_column_name as varchar) as full_column_name,\n        cast(full_table_name as varchar) as full_table_name,\n        cast(column_name as varchar) as column_name,\n        cast(data_type as varchar) as data_type,\n        cast(is_new as boolean) as is_new,\n        cast(detected_at as timestamp) as detected_at\n    from columns_snapshot_with_id) columns_snapshot\n        left join baseline on (\n            lower(columns_snapshot.column_name) = lower(baseline.column_name)\n        )\n        where lower(columns_snapshot.full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    \n    ),\n\n    pre as (\n        \n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            column_name,\n            data_type,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at\n        from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n    \n    ),\n\n    type_changes as (\n\n        \n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    \n\n    columns_removed as (\n\n        \n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            \n    cast(null as varchar)\n as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        \n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        \n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        \n    ),\n\n    column_changes_test_results as (\n\n        \n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(change as varchar), '') || '-' || coalesce(cast(detected_at as varchar), '') as TEXT))\n as data_issue_id,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at,\n            \n    trim(split(full_table_name,'.')[0],'\"') as database_name\n\n,\n            \n    trim(split(full_table_name,'.')[1],'\"') as schema_name\n\n,\n            \n    trim(split(full_table_name,'.')[2],'\"') as table_name\n\n,\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        group by 1,2,3,4,5,6,7,8,9\n\n    )\n\n        \n    select \n  \n\n  md5(cast(coalesce(cast(data_issue_id as varchar), '') || '-' || coalesce(cast(cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as varchar), '') as TEXT))\n as id,\n        cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_execution_id,\n        cast('test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_unique_id,\n        *\n    from column_changes_test_results", "test_params": {"model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "Compares the table's schema against a baseline contract of columns defined in the table's configuration.", "result": {"result_description": null, "result_query": "with cur as (\n        \n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n        )\n\n        select\n            columns_snapshot.full_table_name,\n            lower(columns_snapshot.column_name) as column_name,\n            columns_snapshot.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n        from (\n\n    \n\n    with table_info as (\n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            cast('dbt_db' as varchar) as database_name,\n            cast('dbt_schema' as varchar) as schema_name,\n            cast('feminino' as varchar) as table_name,\n            \n    cast ('2024-06-29 02:54:27' as timestamp)\n as detected_at\n    ),\n\n    columns_info as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at\n        from table_info\n        cross join\n            (\n                \n                    select\n                        cast('ID' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('NAME' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('IDADE' as varchar) as column_name,\n                        cast('NUMBER' as varchar) as data_type\n                    \n                        union all\n                    \n                \n                    select\n                        cast('SEXO' as varchar) as column_name,\n                        cast('TEXT' as varchar) as data_type\n                    \n                \n            ) rt\n    ),\n\n    columns_snapshot as (\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            data_type,\n            detected_at,\n            case when\n                    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) not in (\n        select full_column_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                    and full_table_name in (\n        select distinct full_table_name from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\"\n        where detected_at = (select max(detected_at) from \"DBT_DB\".\"DBT_SCHEMA_ELEMENTARY\".\"SCHEMA_COLUMNS_SNAPSHOT\" where lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO'))\n        and lower(full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    )\n                then true\n                else false\n            end as is_new\n        from columns_info\n    ),\n\n    columns_snapshot_with_id as (\n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(data_type as varchar), '') as TEXT))\n as column_state_id,\n            upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n    )\n\n    select\n        cast(column_state_id as varchar) as column_state_id,\n        cast(full_column_name as varchar) as full_column_name,\n        cast(full_table_name as varchar) as full_table_name,\n        cast(column_name as varchar) as column_name,\n        cast(data_type as varchar) as data_type,\n        cast(is_new as boolean) as is_new,\n        cast(detected_at as timestamp) as detected_at\n    from columns_snapshot_with_id) columns_snapshot\n        left join baseline on (\n            lower(columns_snapshot.column_name) = lower(baseline.column_name)\n        )\n        where lower(columns_snapshot.full_table_name) = lower('DBT_DB.DBT_SCHEMA.FEMININO')\n    \n    ),\n\n    pre as (\n        \n        select\n            cast('DBT_DB.DBT_SCHEMA.FEMININO' as varchar) as full_table_name,\n            column_name,\n            data_type,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at\n        from dbt_db.dbt_schema_elementary.\"test_20e905997a_elementary_schema_changes_from_baseline_feminino___schema_baseline__tmp_20240629025425319326\"\n    \n    ),\n\n    type_changes as (\n\n        \n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    \n\n    columns_removed as (\n\n        \n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            \n    cast(null as varchar)\n as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        \n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        \n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        \n    ),\n\n    column_changes_test_results as (\n\n        \n        select\n            \n  \n\n  md5(cast(coalesce(cast(full_table_name as varchar), '') || '-' || coalesce(cast(column_name as varchar), '') || '-' || coalesce(cast(change as varchar), '') || '-' || coalesce(cast(detected_at as varchar), '') as TEXT))\n as data_issue_id,\n            \n    cast ('2024-06-29 02:54:28' as timestamp)\n as detected_at,\n            \n    trim(split(full_table_name,'.')[0],'\"') as database_name\n\n,\n            \n    trim(split(full_table_name,'.')[1],'\"') as schema_name\n\n,\n            \n    trim(split(full_table_name,'.')[2],'\"') as table_name\n\n,\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        group by 1,2,3,4,5,6,7,8,9\n\n    )\n\n        \n    select \n  \n\n  md5(cast(coalesce(cast(data_issue_id as varchar), '') || '-' || coalesce(cast(cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as varchar), '') as TEXT))\n as id,\n        cast('a9010860-e10c-425d-ba42-b8c5336bd07a.test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_execution_id,\n        cast('test.my_project_dbt.elementary_schema_changes_from_baseline_feminino_.20e905997a' as varchar) as test_unique_id,\n        *\n    from column_changes_test_results"}, "configuration": {"test_name": "schema_changes_from_baseline", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary-tests"], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:31+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_id.c53a5ada30", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_id.c53a5ada30.id.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "id", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:26-03:00", "latest_run_time_utc": "2024-06-29T02:54:26+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select id\nfrom dbt_db.dbt_schema.feminino\nwhere id is null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select id\nfrom dbt_db.dbt_schema.feminino\nwhere id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:26+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_idade.76acecd178", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_idade.76acecd178.idade.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "idade", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select idade\nfrom dbt_db.dbt_schema.feminino\nwhere idade is null", "test_params": {"column_name": "idade", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select idade\nfrom dbt_db.dbt_schema.feminino\nwhere idade is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "idade", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:25+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_name.3c20f4a1b1", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_name.3c20f4a1b1.name.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "name", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select name\nfrom dbt_db.dbt_schema.feminino\nwhere name is null", "test_params": {"column_name": "name", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select name\nfrom dbt_db.dbt_schema.feminino\nwhere name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "name", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:25+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.my_project_dbt.not_null_feminino_sexo.c6c5da5488", "elementary_unique_id": "test.my_project_dbt.not_null_feminino_sexo.c6c5da5488.sexo.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "sexo", "test_name": "not_null", "test_display_name": "Not Null", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:25-03:00", "latest_run_time_utc": "2024-06-29T02:54:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select sexo\nfrom dbt_db.dbt_schema.feminino\nwhere sexo is null", "test_params": {"column_name": "sexo", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select sexo\nfrom dbt_db.dbt_schema.feminino\nwhere sexo is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "sexo", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:25+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.my_project_dbt.unique_feminino_id.0372147441", "elementary_unique_id": "test.my_project_dbt.unique_feminino_id.0372147441.id.generic", "database_name": "dbt_db", "schema_name": "dbt_schema", "table_name": "feminino", "column_name": "id", "test_name": "unique", "test_display_name": "Unique", "original_path": "models/bronze/models.yml", "latest_run_time": "2024-06-28T23:54:27-03:00", "latest_run_time_utc": "2024-06-29T02:54:27+00:00", "latest_run_status": "pass", "model_unique_id": "model.my_project_dbt.feminino", "table_unique_id": "dbt_db.dbt_schema.feminino", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom dbt_db.dbt_schema.feminino\nwhere id is not null\ngroup by id\nhaving count(*) > 1", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    id as unique_field,\n    count(*) as n_records\n\nfrom dbt_db.dbt_schema.feminino\nwhere id is not null\ngroup by id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "id", "model": "{{ get_where_subquery(ref('feminino')) }}"}}, "test_tags": [], "normalized_full_path": "my_project_dbt/models/bronze/models.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-06-29T02:54:27+00:00", "id": "a9010860-e10c-425d-ba42-b8c5336bd07a", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}]}, "test_runs_totals": {"model.my_project_dbt.feminino": {"errors": 0, "warnings": 0, "passed": 6, "failures": 0}}, "coverages": {"model.my_project_dbt.feminino": {"table_tests": 1, "column_tests": 5}}, "model_runs": [{"unique_id": "model.my_project_dbt.ingestion1", "schema": "dbt_schema", "name": "ingestion1", "status": "success", "last_exec_time": 1.7, "median_exec_time": 1.45, "compiled_code": "select\n'1' as id,\n'emanuel' as name,\n14 as idade,\n'm' as sexo\n\nunion all\n\nselect \n'2' as id,\n'regina' as name,\n10 as idade,\n'f' as sexo", "last_generated_at": "2024-06-29T02:44:30+00:00", "exec_time_change_rate": 17.24137931034482, "totals": {"errors": 0, "success": 8}, "runs": [{"id": "c35d990d-6f18-4a02-9de5-c0d44d5aa985", "time_utc": "2024-06-29T02:25:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "b96647a7-5891-4776-9139-87f66e5a4ff9", "time_utc": "2024-06-29T02:26:08+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.4}, {"id": "eaed1ac0-9dde-4e6f-9666-3db07dbb54f1", "time_utc": "2024-06-29T02:26:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "c1af48b5-9a7c-44a6-b2d8-0db6bf0e6c28", "time_utc": "2024-06-29T02:28:29+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "7ed6a729-ef7c-4ac4-9d0d-d773ef17add2", "time_utc": "2024-06-29T02:29:21+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "6ceaadd3-cff4-4052-b6d2-2ae68d9090c7", "time_utc": "2024-06-29T02:42:32+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}, {"id": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "time_utc": "2024-06-29T02:43:31+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.3}, {"id": "3ba0e126-8e5d-455c-982f-18d080e25b41", "time_utc": "2024-06-29T02:44:30+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}]}, {"unique_id": "model.my_project_dbt.feminino", "schema": "dbt_schema", "name": "feminino", "status": "success", "last_exec_time": 1.5, "median_exec_time": 1.6, "compiled_code": "select\n*\nfrom \ndbt_db.dbt_schema.ingestion1\nwhere sexo = 'f'", "last_generated_at": "2024-06-29T02:44:30+00:00", "exec_time_change_rate": -6.25, "totals": {"errors": 0, "success": 8}, "runs": [{"id": "c35d990d-6f18-4a02-9de5-c0d44d5aa985", "time_utc": "2024-06-29T02:25:36+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}, {"id": "b96647a7-5891-4776-9139-87f66e5a4ff9", "time_utc": "2024-06-29T02:26:08+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "eaed1ac0-9dde-4e6f-9666-3db07dbb54f1", "time_utc": "2024-06-29T02:26:52+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "c1af48b5-9a7c-44a6-b2d8-0db6bf0e6c28", "time_utc": "2024-06-29T02:28:30+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.7}, {"id": "7ed6a729-ef7c-4ac4-9d0d-d773ef17add2", "time_utc": "2024-06-29T02:29:21+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}, {"id": "6ceaadd3-cff4-4052-b6d2-2ae68d9090c7", "time_utc": "2024-06-29T02:42:32+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.0}, {"id": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "time_utc": "2024-06-29T02:43:31+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.6}, {"id": "3ba0e126-8e5d-455c-982f-18d080e25b41", "time_utc": "2024-06-29T02:44:30+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.5}]}], "model_runs_totals": {"model.my_project_dbt.ingestion1": {"errors": 0, "warnings": 0, "passed": 8, "failures": 0}, "model.my_project_dbt.feminino": {"errors": 0, "warnings": 0, "passed": 8, "failures": 0}}, "filters": {"test_results": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.my_project_dbt.feminino"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.my_project_dbt.ingestion1"]}], "test_runs": [{"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.my_project_dbt.feminino"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.my_project_dbt.ingestion1"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.my_project_dbt.ingestion1", "model.my_project_dbt.feminino"]}]}, "lineage": {"nodes": [{"id": "model.my_project_dbt.feminino", "type": "model", "sub_type": "table"}, {"id": "model.my_project_dbt.ingestion1", "type": "model", "sub_type": "table"}], "edges": [["model.my_project_dbt.feminino", "model.my_project_dbt.ingestion1"]]}, "invocations": [{"invocation_id": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, {"invocation_id": "3ba0e126-8e5d-455c-982f-18d080e25b41", "detected_at": null, "command": "run", "selected": "bronze", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.elementary.alerts_dbt_source_freshness": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.schema_columns_snapshot": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_artifacts_hashes": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_run_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.elementary_test_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.monitors_runs": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_columns": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.snapshot_run_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.metrics_anomaly_score": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_models": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.anomaly_threshold_sensitivity": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_snapshots": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.my_project_dbt.feminino": "3ba0e126-8e5d-455c-982f-18d080e25b41", "model.elementary.dbt_exposures": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.model_run_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.metadata": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_sources": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.test_result_rows": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.alerts_anomaly_detection": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.alerts_dbt_tests": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_metrics": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_tests": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.alerts_schema_changes": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.my_project_dbt.ingestion1": "3ba0e126-8e5d-455c-982f-18d080e25b41", "model.elementary.dbt_invocations": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.alerts_dbt_models": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.data_monitoring_metrics": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_seeds": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.dbt_source_freshness_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856", "model.elementary.job_run_results": "4fce3bf2-22cd-4152-92d9-7785ed83d856"}, "invocations_job_identification": {}, "env": {"project_name": "my_project_dbt", "env": "dev", "warehouse_type": "snowflake"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "2fe9c1f2-4529-4729-b038-85b511e06135", "anonymous_warehouse_id": "4b1f403173cbd6112e6a650cf56dbc240602d037d06ad9e426178ffd54f7fc60"}}